# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from typing import Dict, List, Optional

from pydantic import BaseModel, Field
from resources.io.k8s.api.core import v1 as corev1
from resources.io.k8s.apimachinery.pkg.apis.meta import v1 as metav1

from openshift_resources.resource import BaseResource
from wrapper_constants.velero.restore import RestorePhase, HookErrorMode, PolicyType


class ExecRestoreHook(BaseModel):
    command: List[str] = Field(
        ...,
        description='Command is the command and arguments to execute from within a container after a pod has been restored.',
        min_items=1,
    )
    container: Optional[str] = Field(
        None,
        description="Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.",
    )
    execTimeout: Optional[str] = Field(
        None,
        description='ExecTimeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.',
    )
    onError: Optional[HookErrorMode] = Field(
        None,
        description='OnError specifies how Velero should behave if it encounters an error executing this hook.',
    )
    waitTimeout: Optional[str] = Field(
        None,
        description='WaitTimeout defines the maximum amount of time Velero should wait for the container to be Ready before attempting to run the command.',
    )


class InitRestoreHook(BaseModel):
    initContainers: Optional[List[corev1.Container]] = Field(
        None,
        description='InitContainers is list of init containers to be added to a pod during its restore.',
    )
    timeout: Optional[str] = Field(
        None,
        description='Timeout defines the maximum amount of time Velero should wait for the initContainers to complete.',
    )


class RestoreResourceHook(BaseModel):
    exec: Optional[ExecRestoreHook] = Field(None, description='Exec defines an exec restore hook.')
    init: Optional[InitRestoreHook] = Field(None, description='Init defines an init restore hook.')


class RestoreResourceHookSpec(BaseModel):
    excludedNamespaces: Optional[List[str]] = Field(
        None,
        description='ExcludedNamespaces specifies the namespaces to which this hook spec does not apply.',
    )
    excludedResources: Optional[List[str]] = Field(
        None,
        description='ExcludedResources specifies the resources to which this hook spec does not apply.',
    )
    includedNamespaces: Optional[List[str]] = Field(
        None,
        description='IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies to all namespaces.',
    )
    includedResources: Optional[List[str]] = Field(
        None,
        description='IncludedResources specifies the resources to which this hook spec applies. If empty, it applies to all resources.',
    )
    labelSelector: Optional[metav1.LabelSelector] = Field(
        None,
        description='LabelSelector, if specified, filters the resources to which this hook spec applies.',
    )
    name: str = Field(..., description='Name is the name of this hook.')
    postHooks: Optional[List[RestoreResourceHook]] = Field(
        None,
        description='PostHooks is a list of RestoreResourceHooks to execute during and after restoring a resource.',
    )


class RestoreHooks(BaseModel):
    resources: Optional[List[RestoreResourceHook]] = None


class RestoreSpec(BaseModel):
    backupName: str = Field(
        ...,
        description='BackupName is the unique name of the Velero backup to restore from.',
    )
    excludedNamespaces: Optional[List[str]] = Field(
        None,
        description='ExcludedNamespaces contains a list of namespaces that are not included in the restore.',
    )
    excludedResources: Optional[List[str]] = Field(
        None,
        description='ExcludedResources is a slice of resource names that are not included in the restore.',
    )
    existingResourcePolicy: Optional[PolicyType] = Field(
        None,
        description='ExistingResourcePolicy specifies the restore behaviour for the kubernetes resource to be restored',
    )
    hooks: Optional[RestoreHooks] = Field(
        None,
        description='Hooks represent custom behaviors that should be executed during or post restore.',
    )
    includeClusterResources: Optional[List[str]] = Field(
        None,
        description='IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the restore. If null, defaults to true.',
    )
    includedNamespaces: Optional[List[str]] = Field(
        None,
        description='IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.',
    )
    includedResources: Optional[List[str]] = Field(
        None,
        description='IncludedResources is a slice of resource names to include in the restore. If empty, all resources in the backup are included.',
    )
    labelSelector: Optional[metav1.LabelSelector] = Field(
        None,
        description='LabelSelector is a metav1.LabelSelector to filter with when restoring individual objects from the backup. If empty or nil, all objects are included. Optional.',
    )
    namespaceMapping: Optional[Dict[str, str]] = Field(
        None,
        description='NamespaceMapping is a map of source namespace names to target namespace names to restore into. Any source namespaces not included in the map will be restored into namespaces of the same name.',
    )
    orLabelSelectors: Optional[List[metav1.LabelSelector]] = Field(
        None,
        description='OrLabelSelectors is list of metav1.LabelSelector to filter with when restoring individual objects from the backup. If multiple provided they will be joined by the OR operator. LabelSelector as well as OrLabelSelectors cannot co-exist in restore request, only one of them can be used',
    )
    preserveNodePorts: Optional[bool] = Field(
        None,
        description='PreserveNodePorts specifies whether to restore old nodePorts from backup.',
    )
    restorePVs: Optional[bool] = Field(
        None,
        description='RestorePVs specifies whether to restore all included PVs from snapshot (via the cloudprovider).',
    )
    restoreStatus: Optional[RestoreStatusSpec] = Field(
        None,
        description='RestoreStatus specifies which resources we should restore the status field. If nil, no objects are included. Optional.',
    )
    scheduleName: Optional[str] = Field(
        None,
        description='ScheduleName is the unique name of the Velero schedule to restore from. If specified, and BackupName is empty, Velero will restore from the most recent successful backup created from this schedule.',
    )


class RestoreStatusSpec(BaseModel):
    includedResources: Optional[List[str]]
    excludedResources: Optional[List[str]]


class RestoreStatus(BaseModel):
    completionTimestamp: Optional[str] = Field(
        None,
        description="CompletionTimestamp records the time the restore operation was completed. Completion time is recorded even on failed restore. The server's time is used for StartTimestamps",
    )
    errors: Optional[int] = Field(
        None,
        description='Errors is a count of all error messages that were generated during execution of the restore. The actual errors are stored in object storage.',
    )
    failureReason: Optional[str] = Field(
        None,
        description='FailureReason is an error that caused the entire restore to fail.',
    )
    phase: Optional[RestorePhase] = Field(
        None, description='Phase is the current state of the Restore'
    )
    progress: Optional[RestoreProgress] = Field(
        None,
        description="Progress contains information about the restore's execution progress. Note that this information is best-effort only -- if Velero fails to update it during a restore for any reason, it may be inaccurate/stale.",
    )
    startTimestamp: Optional[str] = Field(
        None,
        description="StartTimestamp records the time the restore operation was started. The server's time is used for StartTimestamps",
    )
    validationErrors: Optional[List[str]] = Field(
        None,
        description='ValidationErrors is a slice of all validation errors (if applicable)',
    )
    warnings: Optional[int] = Field(
        None,
        description='Warnings is a count of all warning messages that were generated during execution of the restore. The actual warnings are stored in object storage.',
    )


class RestoreProgress(BaseModel):
    totalItems: Optional[int]
    itemsRestored: Optional[int]


class Restore(BaseResource):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[metav1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[RestoreSpec] = Field(
        None, description='RestoreSpec defines the specification for a Velero restore.'
    )
    status: Optional[RestoreStatus] = Field(
        None,
        description='RestoreStatus captures the current status of a Velero restore',
    )


class RestoreList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Restore] = Field(
        ...,
        description='List of restores. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[metav1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
